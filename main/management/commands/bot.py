from ._base import BotBase
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from main.utils import user_func, get_regions, save_region_to_user, get_region_and_times, get_saharlik_and_region, get_qazo, decrease_qazo

class Command(BotBase):

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = await user_func(update)
        regions = await get_regions()
        keyboar = []
        for region in regions:
            keyboar.append(
                [
                    InlineKeyboardButton(region.name, callback_data=f'region_{region.id}')
                ]
            )
        reply_markup = InlineKeyboardMarkup(keyboar)
        await update.message.reply_text('–ò–ª—Ç–∏–º–æ—Å, —û–∑–∏–Ω–≥–∏–∑ –∏—Å—Ç–∏“õ–æ–º–∞—Ç “õ–∏–ª–∞—ë—Ç–≥–∞–Ω —à–∞“≥–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥\n\n–®–∞“≥–∞—Ä '
                                     '—Ç–∞–Ω–ª–∞–≥–∞–Ω–∏–Ω–≥–∏–∑–¥–∞–Ω —Å—û–Ω–≥ –¢–∞“õ–≤–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏–∫ —Ç–∞—Ä–∑–¥–∞ —à—É —à–∞“≥–∞—Ä –≤–∞“õ—Ç–∏–≥–∞ —û–∑–≥–∞—Ä–∞–¥–∏  '
                                     '\n\n*–≠—Å–ª–∞—Ç–º–∞: '
                                     '–¢–∞–Ω–ª–∞–Ω–≥–∞–Ω —à–∞“≥–∞—Ä–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω.', reply_markup=reply_markup)

    
    async def region(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = await user_func(update)
        query = update.callback_query
        region_id = query.data.split('_')[1]
        await save_region_to_user(user, region_id)
        keyboard = [
            [
                KeyboardButton('–ù–∞–º–æ–∑ –≤–∞–∫—Ç–ª–∞—Ä–∏')
            ],
            [
                KeyboardButton('–°–∞—Ö–∞—Ä–ª–∏–∫ –≤–∞–∫—Ç–∏'),
                KeyboardButton('–ò—Ñ—Ç–æ—Ä–ª–∏–∫ –≤–∞–∫—Ç–∏')

            ],
            [
                KeyboardButton('–®–∞—Ö–∞—Ä–Ω–∏ —É–∑–≥–∞—Ä—Ç–∏—Ä–∏—à'),
                KeyboardButton('–ö–∞–∑–æ–ª–∞—Ä–∏–º')
            ]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard)

        await query.edit_message_text('–¢–∞–Ω–ª–∞–≥–∞–Ω —à–∞—Ö–∞—Ä–∏–Ω–≥–∏–∑ —Å–∞–∫–ª–∞–Ω–¥–∏')
        await update._bot.send_message(chat_id=user.chat_id, text='–ê—Å—Å–∞–ª–∞–º—É –∞–ª–∞–π–∫—É–º –≤–∞ —Ä–∞—Ö–º–∞—Ç—É–ª–ª–æ—Ö–∏ –≤–∞ –±–∞—Ä–∞–∫–∞—Ç—É –£—à–±—É –±–æ—å—Ç–∏–º–∏–∑ —Å–∏–∑–≥–∞ –Ω–∞–º–æ–∑ –≤–∞–∫—Ç–ª–∞—Ä–∏–Ω–∏ —ç—Å–ª–∞—Ç–∏—à –û–≥—ã–∑ –æ—á–∏—â  –≤–∞ –ï–ø–∏—à –≤–∞–∫—Ç–ª–∞—Ä–∏–¥–∞–Ω  5 –¥–∞–∫–∏–∫–∞ –∞–≤–≤–∞–ª—å –æ–≥–æ–Ω–ª–∞–Ω—Ç–∏—Ä–∏—à  —Ö–∞–º–¥–∞ –æ–∫—ã–ª–º–∞–π –∫–æ–ª–≥–∞–Ω –Ω–∞–º–æ–∑ –∫–∞–∑–æ–ª–∞—Ä–∏–Ω–∏ —Å–∞–Ω–∞—Å–Ω–≥–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∞–¥–∏', reply_markup=reply_markup)

    async def all_times(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = await user_func(update)
        data = await get_region_and_times(user)
        await update.message.reply_text(f'{data["region"]} —à–∞“≥—Ä–∏–¥–∞ –±—É–≥—É–Ω–≥–∏ –Ω–∞–º–æ–∑ –≤–∞“õ—Ç–ª–∞—Ä–∏' +
                                        '\n*–≠—Å–ª–∞—Ç–º–∞: —É—à–±—É –Ω–∞–º–æ–∑ –≤–∞–∫—Ç–ª–∞—Ä–∏ Islom.uz —Å–∞–π–∏—Ç–∏–¥–∞–Ω –æ–ª–∏–Ω–≥–∞–Ω\n\n'
                                     f'üîπ –ë–æ–º–¥–æ–¥     {data["bomdod"]}\n\n'
                                     f'üîπ –ü–µ—à–∏–Ω      {data["peshin"]}\n\n'
                                     f'üîπ –ê—Å—Ä             {data["asr"]}\n\n'
                                     f'üîπ –®–æ–º          {data["shom"]}\n\n'
                                     f'üîπ –•—É—Ñ—Ç–æ–Ω      {data["xufton"]}')
        
    async def saharlik(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = await user_func(update)
        data = await get_saharlik_and_region(user)
        await update.message.reply_text(f'üèô –°–∞“≥–∞—Ä–ª–∏–∫: {data["bomdod"]}\n\n–û“ì–∏–∑ —ë–ø–∏—à –¥—É–æ—Å–∏: –ù–∞–≤–∞–π—Ç—É –∞–Ω –∞—Å—É–º–∞ —Å–æ–≤–º–∞ —à–∞—Ö—Ä–∏ ' +
                                     '—Ä–∞–º–∞–∑–æ–Ω–∞ –º–∏–Ω–∞–ª —Ñ–∞–∂—Ä–∏ –∏–ª–∞–ª '
                                     '–º–∞“ì—Ä–∏–±–∏, —Ö–æ–ª–∏—Å–∞–Ω –ª–∏–ª–ª–∞—Ö–∏ —Ç–∞—ä–∞–ª–∞. '
                                     '–ê–ª–ª–æ“≥—É –∞–∫–±–∞—Ä!\n\n'
                                     f'üè° –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω —à–∞“≥–∞—Ä: {data["region"]}  ')

    async def iftorlik(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = await user_func(update)
        data = await get_saharlik_and_region(user)
        await update.message.reply_text(f'üåÑ –ò—Ñ—Ç–æ—Ä–ª–∏–∫: {data["shom"]}\n\n–û“ì–∏–∑ –æ—á–∏—à –¥—É–æ—Å–∏: –ê–ª–ª–æ“≥—É–º–º–∞ –ª–∞–∫–∞ —Å—É–º—Ç—É –≤–∞ –±–∏–∫–∞ ' +
                                     '–∞–º–∞–Ω—Ç—É –≤–∞ —ä–∞–ª–∞–π–∫–∞ —Ç–∞–≤–∞–∫–∫–∞–ª—Ç—É –≤–∞ —ä–∞–ª–∞ —Ä–∏–∑“õ–∏–∫–∞ –∞—Ñ—Ç–∞—Ä—Ç—É, '
                                     '—Ñ–∞“ì—Ñ–∏—Ä–ª–∏ –≤–∞ “ì–æ—Ñ—Ñ–∞—Ä—É–º–∞ “õ–æ–¥–¥–∞–º—Ç—É –≤–∞ –º–∞ –∞—Ö—Ö–æ—Ä—Ç—É. –ê–º–∏–π–Ω\n\n'
                                     f'üè° –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω —à–∞“≥–∞—Ä: {data["region"]}  ')
        
    
    async def qazo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = await user_func(update)
        query = update.callback_query
        decrease = False
        
        if query != None:
            name_namaz = query.data.split('_')[1]

            decrease = await decrease_qazo(user, name_namaz)
        
        data = await get_qazo(user)

        keyboar = [
            [
                InlineKeyboardButton(f'–ë–æ–º–¥–æ–¥ {data["bomdod"]} —Ç–∞ –∫–∞–∑–æ', callback_data='0'),
                InlineKeyboardButton('–ö–∞–º–∞–π—Ç–∏—Ä–∏—à', callback_data='qazo_bomdod')
            ],
            [
                InlineKeyboardButton(f'–ü–µ—à–∏–Ω {data["peshin"]} —Ç–∞ –∫–∞–∑–æ', callback_data='0'),
                InlineKeyboardButton('–ö–∞–º–∞–π—Ç–∏—Ä–∏—à', callback_data='qazo_peshin')
            ],
            [
                InlineKeyboardButton(f'–ê—Å—Ä {data["asr"]} —Ç–∞ –∫–∞–∑–æ', callback_data='0'),
                InlineKeyboardButton('–ö–∞–º–∞–π—Ç–∏—Ä–∏—à', callback_data='qazo_asr')
            ],
            [
                InlineKeyboardButton(f'–®–æ–º {data["shom"]} —Ç–∞ –∫–∞–∑–æ', callback_data='0'),
                InlineKeyboardButton('–ö–∞–º–∞–π—Ç–∏—Ä–∏—à', callback_data='qazo_shom')
            ],
            [
                InlineKeyboardButton(f'–•—É—Ñ—Ç–æ–Ω {data["xufton"]} —Ç–∞ –∫–∞–∑–æ', callback_data='0'),
                InlineKeyboardButton('–ö–∞–º–∞–π—Ç–∏—Ä–∏—à', callback_data='qazo_xufton')
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboar)

        if decrease:
            await query.edit_message_text('–£–∫—ã–ª–º–∞–π –∫–æ–ª–≥–∞–Ω –Ω–∞–º–æ–∑–ª–∞—Ä', reply_markup=reply_markup)
        else:
            await update.message.reply_text('–£–∫—ã–ª–º–∞–π –∫–æ–ª–≥–∞–Ω –Ω–∞–º–æ–∑–ª–∞—Ä', reply_markup=reply_markup)

    async def qazo_remove(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = await user_func(update)
        query = update.callback_query
        name_namaz = query.data.split('_')[1]
        await decrease_qazo(user, name_namaz)
        await query.delete_message()

    async def delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.delete_message()

    def handle(self, *args, **kwargs):
        app = self.application 
        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CallbackQueryHandler(self.delete, pattern="^(delete)$"))
        app.add_handler(CallbackQueryHandler(self.region, pattern="^(region_\d)$"))
        app.add_handler(CallbackQueryHandler(self.qazo, pattern="^(qazo_)"))
        app.add_handler(CallbackQueryHandler(self.qazo_remove, pattern="^(del_)"))
        app.add_handler(MessageHandler(filters.Regex('–ù–∞–º–æ–∑ –≤–∞–∫—Ç–ª–∞—Ä–∏'), self.all_times))
        app.add_handler(MessageHandler(filters.Regex('–°–∞—Ö–∞—Ä–ª–∏–∫ –≤–∞–∫—Ç–∏'), self.saharlik))
        app.add_handler(MessageHandler(filters.Regex('–ò—Ñ—Ç–æ—Ä–ª–∏–∫ –≤–∞–∫—Ç–∏'), self.iftorlik))
        app.add_handler(MessageHandler(filters.Regex('–®–∞—Ö–∞—Ä–Ω–∏ —É–∑–≥–∞—Ä—Ç–∏—Ä–∏—à'), self.start))
        app.add_handler(MessageHandler(filters.Regex('–ö–∞–∑–æ–ª–∞—Ä–∏–º'), self.qazo))
        
        app.run_polling()
